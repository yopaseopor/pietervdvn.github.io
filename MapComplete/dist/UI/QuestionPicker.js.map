{"version":3,"sources":["UI/UIElement.ts","UI/QuestionPicker.ts"],"names":[],"mappings":"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","file":"QuestionPicker.js","sourceRoot":"..","sourcesContent":["import {UIEventSource} from \"./UIEventSource\";\n\nexport abstract class UIElement {\n\n    private static nextId: number = 0;\n\n    public readonly id: string;\n\n    protected constructor(source: UIEventSource<any>) {\n        this.id = \"ui-element-\" + UIElement.nextId;\n        UIElement.nextId++;\n        this.ListenTo(source);\n    }\n\n\n    protected ListenTo(source: UIEventSource<any>) {\n        if(source === undefined){\n            return;\n        }\n        const self = this;\n        source.addCallback(() => {\n            self.Update();\n        })\n    }\n\n    Update(): void {\n        let element  = document.getElementById(this.id);\n        if (element === null || element === undefined) {\n            // The element is not painted\n            return;\n        }\n        \n        element.innerHTML = this.InnerRender();\n        this.InnerUpdate(element);\n    }\n    \n    // Called after the HTML has been replaced. Can be used for css tricks\n    abstract InnerUpdate(htmlElement : HTMLElement);\n\n    Render(): string {\n        return \"<div class='uielement' id='\" + this.id + \"'>\" + this.InnerRender() + \"</div>\"\n    }\n\n    AttachTo(divId: string) {\n        let element = document.getElementById(divId);\n        element.innerHTML = this.Render();\n    }\n\n    protected abstract InnerRender(): string;\n\n    public IsEmpty(): boolean {\n        return this.InnerRender() === \"\";\n    }\n\n}","import {UIElement} from \"./UIElement\";\nimport {Question} from \"../Logic/Question\";\nimport {UIEventSource} from \"./UIEventSource\";\n\nexport class QuestionPicker extends UIElement {\n    private readonly _questions: Question[];\n    private readonly tags: any;\n    private source: UIEventSource<any>;\n\n    constructor(questions: Question[],\n                tags: UIEventSource<any>) {\n        super(tags);\n        this._questions = questions;\n        this.tags = tags.data;\n        this.source = tags;\n    }\n\n\n    protected InnerRender(): string {\n\n        let t = this.tags;\n        let highestPriority = Number.MIN_VALUE;\n        let highestQ: Question;\n        for (const q of this._questions) {\n            \n            if (!q.Applicable(t)) {\n                continue;\n            }\n\n            const priority = q.question.severity;\n            if (priority > highestPriority) {\n                highestPriority = priority;\n                highestQ = q;\n            }\n        }\n\n\n        if (highestQ === undefined) {\n            return \"De vragen zijn op!\";\n        }\n\n        return highestQ.CreateHtml(this.source).Render();\n    }\n    InnerUpdate(htmlElement: HTMLElement) {\n    }\n\n}"]}