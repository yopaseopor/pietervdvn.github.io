{"version":3,"sources":["Logic/TagsFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA,CAQC;;AAHG,EAAA,UAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,UAAlB,EAAiC;AAC7B,WAAO,KAAK,OAAL,CAAa,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAb,CAAP;AACH,GAFD;;AAGJ,SAAA,UAAA;AARA,CAAA,EAAA;;AAAsB,OAAA,CAAA,UAAA,GAAA,UAAA;;AAWtB,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,SAAA,CAAA,KAAA,EAAA,MAAA,CAAA;;AAIvB,WAAA,KAAA,CAAY,CAAZ,EAAuB,CAAvB,EAAgC;AAAhC,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAEI,IAAA,KAAI,CAAC,EAAL,GAAU,CAAV;AACA,IAAA,KAAI,CAAC,EAAL,GAAU,CAAV;;AACH;;AAED,EAAA,KAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACI,WAAO,CAAC,OAAO,KAAK,EAAZ,GAAiB,KAAjB,GAAyB,KAAK,EAA9B,GAAmC,IAApC,CAAP;AACH,GAFD;;AAIA,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAwC;;;AACpC,SAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAlB,EAAkB,EAAA,GAAA,MAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAAwB;AAAnB,UAAM,GAAG,GAAA,MAAA,CAAA,EAAA,CAAT;;AACD,UAAI,GAAG,CAAC,CAAJ,KAAU,KAAK,EAAnB,EAAuB;AACnB,YAAI,GAAG,CAAC,CAAJ,KAAU,EAAd,EAAkB;AACd;AACA,iBAAO,KAAP;AACH;;AACD,YAAI,KAAK,EAAL,KAAY,GAAhB,EAAqB;AACjB;AACA,iBAAO,IAAP;AACH;;AAGD,YAAM,UAAU,GAAA,CAAA,EAAA,GAAE,GAAG,CAAC,CAAJ,CAAM,KAAN,CAAY,KAAK,EAAjB,CAAF,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAE,MAAxC;AACA,eAAO,CAAC,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAA,UAAA,GAAc,CAAf,IAAoB,CAA3B;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAlBD;;AAoBA,EAAA,KAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA0B;AACtB,UAAM,oDAAN;AACH,GAFD;;AAIJ,SAAA,KAAA;AAtCA,CAAA,CAA2B,UAA3B,CAAA;;AAAa,OAAA,CAAA,KAAA,GAAA,KAAA;;AAwCb,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,SAAA,CAAA,GAAA,EAAA,MAAA,CAAA;;AAIrB,WAAA,GAAA,CAAY,GAAZ,EAAyB,KAAzB,EAAsC;AAAtC,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAEI,IAAA,KAAI,CAAC,GAAL,GAAW,GAAX;AACA,IAAA,KAAI,CAAC,KAAL,GAAa,KAAb;;AACH;;AAED,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAwC;AACpC,SAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAlB,EAAkB,EAAA,GAAA,MAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAAwB;AAAnB,UAAM,GAAG,GAAA,MAAA,CAAA,EAAA,CAAT;;AACD,UAAI,GAAG,CAAC,CAAJ,KAAU,KAAK,GAAnB,EAAwB;AACpB,YAAI,GAAG,CAAC,CAAJ,KAAU,EAAd,EAAkB;AACd;AACA,iBAAO,KAAK,KAAL,KAAe,EAAtB;AACH;;AACD,YAAI,KAAK,KAAL,KAAe,GAAnB,EAAwB;AACpB;AACA,iBAAO,IAAP;AACH;;AAED,eAAO,KAAK,KAAL,KAAe,GAAG,CAAC,CAA1B;AACH;AACJ;;AACD,QAAG,KAAK,KAAL,KAAe,EAAlB,EAAqB;AACjB,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH,GApBD;;AAsBA,EAAA,GAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACI,QAAI,KAAK,KAAL,KAAe,GAAnB,EAAwB;AACpB,aAAO,CAAC,OAAO,KAAK,GAAZ,GAAkB,IAAnB,CAAP;AACH;;AACD,QAAI,KAAK,KAAL,KAAe,EAAnB,EAAuB;AACnB;AACA,aAAO,CAAC,QAAQ,KAAK,GAAb,GAAmB,IAApB,CAAP;AACH;;AACD,WAAO,CAAC,OAAO,KAAK,GAAZ,GAAkB,KAAlB,GAA0B,KAAK,KAA/B,GAAuC,IAAxC,CAAP;AACH,GATD;;AAWA,EAAA,GAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA0B;AACtB,WAAO,IAAI,GAAJ,CAAQ,KAAK,GAAb,EAAkB,QAAQ,CAAC,aAAT,CAAuB,KAAK,KAA5B,EAAmC,IAAnC,CAAlB,CAAP;AACH,GAFD;;AAIJ,SAAA,GAAA;AA/CA,CAAA,CAAyB,UAAzB,CAAA;;AAAa,OAAA,CAAA,GAAA,GAAA,GAAA;;AAiDb,IAAA,EAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwB,EAAA,SAAA,CAAA,EAAA,EAAA,MAAA,CAAA;;AAIpB,WAAA,EAAA,CAAY,EAAZ,EAA4B;AAA5B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAEI,IAAA,KAAI,CAAC,EAAL,GAAU,EAAV;;AACH;;AAGD,EAAA,EAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAwC;AAEpC,SAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,EAA9B,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAAkC;AAA7B,UAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;;AACD,UAAI,UAAU,CAAC,OAAX,CAAmB,IAAnB,CAAJ,EAA8B;AAC1B,eAAO,IAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH,GATD;;AAWA,EAAA,EAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AAEI,QAAM,OAAO,GAAG,EAAhB;;AACA,SAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,EAA9B,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAAkC;AAA7B,UAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;AACD,UAAM,UAAU,GAAG,UAAU,CAAC,UAAX,EAAnB;;AACA,WAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAAA,UAAvB,EAAuB,EAAA,GAAA,YAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAkC;AAA9B,YAAM,SAAS,GAAA,YAAA,CAAA,EAAA,CAAf;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,SAAb;AACH;AACJ;;AACD,WAAO,OAAP;AACH,GAVD;;AAYA,EAAA,EAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA0B;AACtB,QAAM,UAAU,GAAG,EAAnB;;AACA,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,EAArB,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAAyB;AAApB,UAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;AACD,MAAA,UAAU,CAAC,IAAX,CAAgB,CAAC,CAAC,gBAAF,CAAmB,IAAnB,CAAhB;AACH;;AACD,WAAO,IAAI,EAAJ,CAAO,UAAP,CAAP;AACH,GAND;;AAQJ,SAAA,EAAA;AAzCA,CAAA,CAAwB,UAAxB,CAAA;;AAAa,OAAA,CAAA,EAAA,GAAA,EAAA;;AA2Cb,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,SAAA,CAAA,GAAA,EAAA,MAAA,CAAA;;AAIrB,WAAA,GAAA,CAAY,GAAZ,EAA6B;AAA7B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAEI,IAAA,KAAI,CAAC,GAAL,GAAW,GAAX;;AACH;;AAED,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,IAAR,EAAwC;AAEpC,SAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,GAA9B,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAAmC;AAA9B,UAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;;AACD,UAAI,CAAC,UAAU,CAAC,OAAX,CAAmB,IAAnB,CAAL,EAA+B;AAC3B,eAAO,KAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH,GATD;;AAWQ,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAR,UAAgB,MAAhB,EAAgC,OAAhC,EAAiD;AAC7C,QAAI,MAAM,GAAG,EAAb;;AACA,SAAiB,IAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,OAAjB,EAAiB,EAAA,GAAA,SAAA,CAAA,MAAjB,EAAiB,EAAA,EAAjB,EAA0B;AAArB,UAAM,EAAE,GAAA,SAAA,CAAA,EAAA,CAAR;AACD,MAAA,MAAM,CAAC,IAAP,CAAY,MAAM,GAAG,EAArB;AACH;;AACD,WAAO,MAAP;AACH,GANO;;AAQR,EAAA,GAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AAEI,QAAI,UAAU,GAAG,IAAjB;;AAEA,SAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,GAA9B,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAAmC;AAA9B,UAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;AACD,UAAI,gBAAgB,GAAG,UAAU,CAAC,UAAX,EAAvB;;AACA,UAAI,UAAU,KAAK,IAAnB,EAAyB;AACrB,QAAA,UAAU,GAAG,gBAAb;AACA;AACH;;AAED,UAAI,UAAU,GAAG,EAAjB;;AACA,WAAmB,IAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAAA,UAAnB,EAAmB,EAAA,GAAA,YAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAA+B;AAA1B,YAAI,MAAM,GAAA,YAAA,CAAA,EAAA,CAAV;AACD,QAAA,UAAU,CAAC,IAAX,CACI,KAAK,OAAL,CAAa,MAAb,EAAqB,gBAArB,CADJ;AAGH;;AACD,MAAA,UAAU,GAAG,UAAb;AACH;;AACD,WAAO,UAAP;AACH,GApBD;;AAsBA,EAAA,GAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA0B;AACtB,QAAM,UAAU,GAAG,EAAnB;;AACA,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,GAArB,EAAgB,EAAA,GAAA,EAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAA0B;AAArB,UAAM,CAAC,GAAA,EAAA,CAAA,EAAA,CAAP;AACD,MAAA,UAAU,CAAC,IAAX,CAAgB,CAAC,CAAC,gBAAF,CAAmB,IAAnB,CAAhB;AACH;;AACD,WAAO,IAAI,GAAJ,CAAQ,UAAR,CAAP;AACH,GAND;;AAOJ,SAAA,GAAA;AAzDA,CAAA,CAAyB,UAAzB,CAAA;;AAAa,OAAA,CAAA,GAAA,GAAA,GAAA;;AA4Db,IAAA,QAAA;AAAA;AAAA,YAAA;AAAA,WAAA,QAAA,GAAA,CAmBC;;AAjBU,EAAA,QAAA,CAAA,aAAA,GAAP,UAAqB,UAArB,EAAoC;AAChC,QAAM,MAAM,GAAG,EAAf;;AACA,SAAK,IAAM,CAAX,IAAgB,UAAhB,EAA4B;AACxB,MAAA,MAAM,CAAC,IAAP,CAAY;AAAC,QAAA,CAAC,EAAE,CAAJ;AAAO,QAAA,CAAC,EAAE,UAAU,CAAC,CAAD;AAApB,OAAZ;AACH;;AACD,WAAO,MAAP;AACH,GANM;;AAQA,EAAA,QAAA,CAAA,aAAA,GAAP,UAAqB,QAArB,EAAuC,IAAvC,EAAgD;AAC5C,SAAK,IAAM,CAAX,IAAgB,IAAhB,EAAsB;AAClB,aAAO,QAAQ,CAAC,OAAT,CAAiB,MAAM,CAAN,GAAU,GAA3B,KAAmC,CAA1C,EAA6C;AACzC,QAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAiB,MAAM,CAAN,GAAU,GAA3B,EAAgC,IAAI,CAAC,CAAD,CAApC,CAAX;AACH;AACJ;;AACD,WAAO,QAAP;AACH,GAPM;;AASX,SAAA,QAAA;AAnBA,CAAA,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA","file":"TagsFilter.js","sourceRoot":"..","sourcesContent":["\nexport abstract class TagsFilter {\n    abstract matches(tags: { k: string, v: string }[]): boolean\n    abstract asOverpass(): string[]\n    abstract substituteValues(tags: any) : TagsFilter;\n\n    matchesProperties(properties: any) : boolean{\n        return this.matches(TagUtils.proprtiesToKV(properties));\n    }\n}\n\n\nexport class Regex extends TagsFilter {\n    private _k: string;\n    private _r: string;\n\n    constructor(k: string, r: string) {\n        super();\n        this._k = k;\n        this._r = r;\n    }\n\n    asOverpass(): string[] {\n        return [\"['\" + this._k + \"'~'\" + this._r + \"']\"];\n    }\n\n    matches(tags: { k: string; v: string }[]): boolean {\n        for (const tag of tags) {\n            if (tag.k === this._k) {\n                if (tag.v === \"\") {\n                    // This tag has been removed\n                    return false;\n                }\n                if (this._r === \"*\") {\n                    // Any is allowed\n                    return true;\n                }\n                \n\n                const matchCount =tag.v.match(this._r)?.length;\n                return (matchCount ?? 0) > 0;\n            }\n        }\n        return false;\n    }\n\n    substituteValues(tags: any) : TagsFilter{\n        throw \"Substituting values is not supported on regex tags\"\n    }\n\n}\n\nexport class Tag extends TagsFilter {\n    public key: string;\n    public value: string;\n\n    constructor(key: string, value: string) {\n        super()\n        this.key = key;\n        this.value = value;\n    }\n\n    matches(tags: { k: string; v: string }[]): boolean {\n        for (const tag of tags) {\n            if (tag.k === this.key) {\n                if (tag.v === \"\") {\n                    // This tag has been removed\n                    return this.value === \"\";\n                }\n                if (this.value === \"*\") {\n                    // Any is allowed\n                    return true;\n                }\n\n                return this.value === tag.v;\n            }\n        }\n        if(this.value === \"\"){\n            return true;\n        }\n        \n        return false;\n    }\n\n    asOverpass(): string[] {\n        if (this.value === \"*\") {\n            return ['[\"' + this.key + '\"]'];\n        }\n        if (this.value === \"\") {\n            // NOT having this key\n            return ['[!\"' + this.key + '\"]'];\n        }\n        return ['[\"' + this.key + '\"=\"' + this.value + '\"]'];\n    }\n\n    substituteValues(tags: any) {\n        return new Tag(this.key, TagUtils.ApplyTemplate(this.value, tags));\n    }\n\n}\n\nexport class Or extends TagsFilter {\n\n    public or: TagsFilter[]\n\n    constructor(or: TagsFilter[]) {\n        super();\n        this.or = or;\n    }\n\n\n    matches(tags: { k: string; v: string }[]): boolean {\n\n        for (const tagsFilter of this.or) {\n            if (tagsFilter.matches(tags)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    asOverpass(): string[] {\n\n        const choices = [];\n        for (const tagsFilter of this.or) {\n            const subChoices = tagsFilter.asOverpass();\n            for(const subChoice of subChoices){\n                choices.push(subChoice)\n            }\n        }\n        return choices;\n    }\n\n    substituteValues(tags: any): TagsFilter {\n        const newChoices = [];\n        for (const c of this.or) {\n            newChoices.push(c.substituteValues(tags));\n        }\n        return new Or(newChoices);\n    }\n\n}\n\nexport class And extends TagsFilter {\n\n    public and: TagsFilter[]\n\n    constructor(and: TagsFilter[]) {\n        super();\n        this.and = and;\n    }\n\n    matches(tags: { k: string; v: string }[]): boolean {\n\n        for (const tagsFilter of this.and) {\n            if (!tagsFilter.matches(tags)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private combine(filter: string, choices: string[]): string[] {\n        var values = []\n        for (const or of choices) {\n            values.push(filter + or);\n        }\n        return values;\n    }\n\n    asOverpass(): string[] {\n\n        var allChoices = null;\n\n        for (const andElement of this.and) {\n            var andElementFilter = andElement.asOverpass();\n            if (allChoices === null) {\n                allChoices = andElementFilter;\n                continue;\n            }\n\n            var newChoices = []\n            for (var choice of allChoices) {\n                newChoices.push(\n                    this.combine(choice, andElementFilter)\n                )\n            }\n            allChoices = newChoices;\n        }\n        return allChoices;\n    }\n\n    substituteValues(tags: any): TagsFilter {\n        const newChoices = [];\n        for (const c of this.and) {\n            newChoices.push(c.substituteValues(tags));\n        }\n        return new And(newChoices);\n    }\n}\n\n\nexport class TagUtils {\n\n    static proprtiesToKV(properties: any): { k: string, v: string }[] {\n        const result = [];\n        for (const k in properties) {\n            result.push({k: k, v: properties[k]})\n        }\n        return result;\n    }\n\n    static ApplyTemplate(template: string, tags: any): string {\n        for (const k in tags) {\n            while (template.indexOf(\"{\" + k + \"}\") >= 0) {\n                template = template.replace(\"{\" + k + \"}\", tags[k]);\n            }\n        }\n        return template;\n    }\n\n}"]}