{"version":3,"sources":["UI/UIEventSource.ts","Logic/ElementStorage.ts"],"names":[],"mappings":"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","file":"ElementStorage.js","sourceRoot":"..","sourcesContent":["export class UIEventSource<T>{\n    \n    public data : T;\n    private _callbacks = [];\n\n    constructor(data: T) {\n        this.data = data;\n    }\n\n\n    public addCallback(callback: ((latestData : T) => void)) {\n        this._callbacks.push(callback);\n        return this;\n    }\n\n    public setData(t: T): void {\n        if (this.data === t) {\n            return;\n        }\n        this.data = t;\n        this.ping();\n    }\n\n    public ping(): void {\n        for (let i in this._callbacks) {\n            this._callbacks[i](this.data);\n        }\n    }\n\n    public map<J>(f: ((T) => J)): UIEventSource<J> {\n        const self = this;\n        this.addCallback(function () {\n            newSource.setData(f(self.data));\n            newSource.ping();\n        });\n        const newSource = new UIEventSource<J>(\n            f(this.data)\n        );\n\n        return newSource;\n\n    }\n\n\n}","/**\n * Keeps track of a dictionary 'elementID' -> element\n */\nimport {UIEventSource} from \"../UI/UIEventSource\";\n\nexport class ElementStorage {\n\n    private _elements = [];\n\n    constructor() {\n\n    }\n\n    addElementById(id: string, eventSource: UIEventSource<any>) {\n        this._elements[id] = eventSource;\n    }\n\n    addElement(element): UIEventSource<any> {\n        const eventSource = new UIEventSource<any>(element.properties);\n        this._elements[element.properties.id] = eventSource;\n        return eventSource;\n    }\n\n    addOrGetElement(element: any) {\n        const elementId = element.properties.id;\n        if (elementId in this._elements) {\n            const es = this._elements[elementId];\n            const keptKeys = es.data;\n            // The element already exists\n            // We add all the new keys to the old keys\n            for (const k in element.properties) {\n                const v = element.properties[k];\n                if (keptKeys[k] !== v) {\n                    keptKeys[k] = v;\n                    es.ping();\n                }\n            }\n\n            return es;\n        }else{\n            return this.addElement(element);\n        }\n    }\n\n    getElement(elementId): UIEventSource<any> {\n        if (elementId in this._elements) {\n            return this._elements[elementId];\n        }\n        console.log(\"Can not find eventsource with id \", elementId);\n    }\n\n\n    removeId(oldId: string) {\n        delete this._elements[oldId];\n    }\n}"]}